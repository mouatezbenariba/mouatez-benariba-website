import { Client, Types } from '@honeybadger-io/core';
import { errorHandler, requestHandler } from './middleware';
import { lambdaHandler } from './aws_lambda';
declare class Honeybadger extends Client {
    errorHandler: typeof errorHandler;
    requestHandler: typeof requestHandler;
    lambdaHandler: typeof lambdaHandler;
    config: Types.Config | Types.ServerlessConfig;
    constructor(opts?: Partial<Types.Config | Types.ServerlessConfig>);
    factory(opts?: Partial<Types.Config | Types.ServerlessConfig>): this;
    configure(opts?: Partial<Types.Config | Types.ServerlessConfig>): this;
    protected __initStore(): void;
    showUserFeedbackForm(): Promise<void>;
    checkIn(id: string): Promise<void>;
    withRequest<R>(request: Record<symbol, unknown>, handler: (...args: never[]) => R, onError?: (...args: unknown[]) => unknown): R | void;
    run<R>(callback: (...args: never[]) => R): R;
}
export { Types } from '@honeybadger-io/core';
declare const _default: Honeybadger;
export default _default;
//# sourceMappingURL=server.d.ts.map